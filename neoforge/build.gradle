plugins {
    id "com.gradleup.shadow"
}

architectury {
    platformSetupLoomIde()
    neoForge()
}

configurations {
    common { canBeResolved = true; canBeConsumed = false }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentNeoForge.extendsFrom common
    shadowBundle { canBeResolved = true; canBeConsumed = false }
}

repositories {
    maven { url "https://maven.neoforged.net/releases" }
    maven { url "https://maven.architectury.dev/" }
    mavenCentral()
}

def mcCoord = (rootProject.findProperty("minecraft_version") ?: rootProject.minecraft_version) as String
def tgt     = rootProject.ext.resolveMcTarget(mcCoord)

dependencies {
    // Required for Loom
    minecraft "com.mojang:minecraft:${mcCoord}"
    mappings loom.officialMojangMappings()

    // Platform loader + API
    neoForge "net.neoforged:neoforge:${rootProject.findProperty('neoforge_version') ?: tgt.neoforge}"
    modApi "dev.architectury:architectury-neoforge:${rootProject.findProperty('architectury_version_plain') ?: tgt.architecturyVer}"

    // Link common module
    common(project(path: ":common", configuration: "namedElements")) { transitive = false }
    shadowBundle project(path: ":common", configuration: "transformProductionNeoForge")
}

processResources {
    def mcFull = mcCoord.toString()
    def parts = mcFull.tokenize('.')
    if (parts.size() < 2) throw new GradleException("Invalid minecraft_version: ${mcFull}")
    def major = parts[0] as int
    def minor = parts[1] as int
    def mcLo = "${major}.${minor}"
    def mcHi = "${major}.${minor + 1}"

    def nfLo = (rootProject.findProperty("neoforge_line_lo") ?: "21.0").toString()
    def nfHi = (rootProject.findProperty("neoforge_line_hi") ?: "22.0").toString()

    def archVer = (rootProject.findProperty("architectury_version_plain")
            ?: project.findProperty("architectury_version_plain")
            ?: "13.0.0").toString()

    inputs.property "version", project.version
    inputs.property "mcLo", mcLo
    inputs.property "mcHi", mcHi
    inputs.property "nfLo", nfLo
    inputs.property "nfHi", nfHi
    inputs.property "archVer", archVer

    filesMatching("META-INF/neoforge.mods.toml") {
        expand([
                version : project.version,
                mcLo    : mcLo,
                mcHi    : mcHi,
                nfLo    : nfLo,
                nfHi    : nfHi,
                archVer : archVer
        ])
        filteringCharset = 'UTF-8'
    }
}

tasks.withType(Jar).configureEach {
    manifest {
        attributes(
                'Implementation-Title': project.name,
                'Implementation-Version': project.version
        )
    }
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = "dev-shadow"

    manifest {
        attributes(
                'Implementation-Title': project.name,
                'Implementation-Version': project.version
        )
    }
}

remapJar {
    inputFile.set(shadowJar.archiveFile)
}
