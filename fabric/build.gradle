plugins {
    id "com.gradleup.shadow"
}

architectury {
    platformSetupLoomIde()
    fabric()
}

configurations {
    common { canBeResolved = true; canBeConsumed = false }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
    shadowBundle { canBeResolved = true; canBeConsumed = false }
}

repositories {
    maven { url "https://maven.fabricmc.net/" }
    maven { url "https://maven.architectury.dev/" }
    mavenCentral()
}

def mcCoord = (rootProject.findProperty("minecraft_version") ?: rootProject.minecraft_version) as String
def tgt     = rootProject.ext.resolveMcTarget(mcCoord)
def yarnB   = (rootProject.findProperty("yarn_build") ?: tgt.yarnBuild) as String

dependencies {
    minecraft "com.mojang:minecraft:${mcCoord}"
    mappings loom.officialMojangMappings()

    // Platform loader + API
    modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${rootProject.findProperty('fabric_api_version') ?: tgt.fabricApi}"
    modApi "dev.architectury:architectury-fabric:${rootProject.findProperty('architectury_version_plain') ?: tgt.architecturyVer}"

    // Link common module
    common(project(path: ":common", configuration: "namedElements")) { transitive = false }
    shadowBundle project(path: ":common", configuration: "transformProductionFabric")
}

processResources {
    inputs.property("version", project.version)
    inputs.property("mcVer", mcCoord)
    inputs.property("archVer", tgt.architecturyVer)

    filesMatching("fabric.mod.json") {
        expand version: project.version, mcVer: mcCoord, archVer: tgt.architecturyVer
    }
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = "dev-shadow"
}

remapJar {
    inputFile.set(shadowJar.archiveFile)
}
